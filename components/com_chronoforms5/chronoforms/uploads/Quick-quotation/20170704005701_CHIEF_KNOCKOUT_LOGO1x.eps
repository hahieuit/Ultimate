%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.5 (Build 16F73) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 149 87
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 149 87
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0 0.80000001 0.60000002 sc
q
5.7848201 51.483833 m
9.0593882 58.532383 12.916401 64.527794 17.356358 69.47155 c
21.795315 74.413307 26.380508 78.248093 31.111938 80.97242 c
35.841869 83.698242 40.44603 85.350975 44.922421 85.933121 c
49.397812 86.513771 53.345661 85.969009 56.76696 84.297829 c
59.095242 83.208794 60.441303 81.553566 60.806644 79.338623 c
61.169983 77.11969 60.915447 74.631615 60.041531 71.869911 c
59.16861 69.107208 57.821053 66.255791 56.002846 63.31216 c
54.182644 60.368538 52.198738 57.605835 50.053123 55.02655 c
47.905514 52.446266 45.757404 50.211384 43.612293 48.320904 c
41.464684 46.430923 39.62701 45.195358 38.099281 44.614208 c
37.078629 44.25037 36.18824 44.25037 35.424126 44.614208 c
34.660511 44.977554 34.059597 45.450047 33.62289 46.032192 c
33.18668 46.612846 32.968075 47.230877 32.968075 47.885292 c
32.968075 48.540207 33.258049 49.011703 33.841492 49.303276 c
35.151619 49.956696 36.679352 51.064167 38.426186 52.628189 c
40.173023 54.189716 41.919857 55.953098 43.666695 57.914852 c
45.413528 59.877602 47.086998 61.96595 48.689095 64.183388 c
50.288197 66.399826 51.562389 68.490669 52.509674 70.452423 c
53.454464 72.415169 53.945572 74.176064 53.983505 75.740082 c
54.01894 77.301613 53.419025 78.447464 52.181767 79.174644 c
50.216827 80.265175 47.504742 80.319 44.048504 79.338623 c
40.591267 78.356255 36.915424 76.503151 33.022476 73.777336 c
29.128033 71.053009 25.307453 67.545677 21.559742 63.25684 c
17.810535 58.967999 14.699171 54.061623 12.226151 48.540207 c
9.6777678 43.0158 8.2039375 38.237518 7.8046613 34.203865 c
7.403388 30.169712 7.7497606 26.880188 8.8412828 24.336788 c
9.9333048 21.791893 11.625239 19.938295 13.918086 18.776995 c
16.210434 17.613699 18.81172 17.104321 21.723446 17.250854 c
23.17831 17.322126 24.780409 17.831505 26.527243 18.776995 c
28.273581 19.72049 29.947048 20.775131 31.549147 21.938425 c
33.148746 23.099728 34.567677 24.264019 35.806435 25.426817 c
37.042694 26.588615 37.880177 27.498219 38.317383 28.152636 c
38.754093 28.80755 39.354008 29.150457 40.118622 29.188835 c
40.882736 29.22472 41.573486 29.096628 42.192863 28.80755 c
42.810246 28.515978 43.265919 28.060429 43.557392 27.443892 c
43.847866 26.826359 43.775497 26.189886 43.339287 25.536467 c
42.902576 24.881554 42.301666 24.135927 41.537552 23.301584 c
40.773933 22.46475 39.936451 21.573587 39.0271 20.630093 c
38.116249 19.685102 37.13353 18.739613 36.079437 17.796118 c
35.023354 16.851128 33.950794 15.978407 32.858772 15.17995 c
30.747099 13.580045 28.710289 12.45413 26.745348 11.799216 c
24.780409 11.145797 22.887337 10.747067 21.068132 10.600533 c
16.628176 10.382728 12.717261 11.053591 9.3323936 12.61761 c
5.9485235 14.179137 3.4545417 16.668709 1.8544405 20.084829 c
0.25284195 23.50095 -0.31213453 27.825178 0.16250561 33.05901 c
0.63514936 38.291843 2.5092542 44.432289 5.7848201 51.483833 c
W*
0 0 149 87 rc
-5.0000539 91.157791 m
65.96685 91.157791 l
65.96685 5.5605049 l
-5.0000539 5.5605049 l
h
f
Q
q
57.912388 67.672226 m
58.821739 67.853149 59.731091 67.835709 60.641941 67.618401 c
61.550797 67.400093 62.279476 67.000366 62.824986 66.419716 c
63.370998 65.836075 63.461334 65.109886 63.097992 64.239159 c
62.879887 63.802052 62.44268 62.821175 61.787865 61.295036 c
61.133053 59.767899 60.29557 57.896358 59.276913 55.67992 c
58.257263 53.462482 57.14827 50.974403 55.947445 48.2127 c
54.74662 45.449997 53.490894 42.614529 52.180771 39.709282 c
54.14571 41.453228 55.874081 42.614529 57.366375 43.19817 c
58.857174 43.77882 60.1134 43.996628 61.133053 43.851589 c
62.151207 43.705055 63.006157 43.269444 63.698406 42.543255 c
64.389153 41.816071 64.953629 40.979237 65.390343 40.035244 c
66.117523 38.580875 66.154953 36.965019 65.499641 35.184689 c
64.844826 33.402367 63.898041 31.38529 62.661781 29.133461 c
61.859734 27.535051 61.041218 26.026358 60.205231 24.609867 c
59.367748 23.192383 58.475365 21.72057 57.530579 20.194429 c
57.093369 19.392982 56.892735 18.867655 56.930164 18.612967 c
56.966099 18.358278 57.14827 18.267069 57.476177 18.341331 c
57.803085 18.412605 58.18539 18.576084 58.622101 18.830772 c
59.059307 19.085461 59.458088 19.357595 59.822926 19.649166 c
61.496395 20.883734 63.11496 22.30122 64.681625 23.901125 c
66.245293 25.498039 67.46508 26.916023 68.337997 28.152586 c
68.846581 28.807499 69.484924 29.150906 70.249039 29.188786 c
71.012657 29.22467 71.72287 29.079634 72.377678 28.752176 c
73.032494 28.424719 73.505142 27.970665 73.796608 27.390015 c
74.086586 26.807867 73.977783 26.189837 73.469704 25.536417 c
73.103867 25.09931 72.595787 24.463335 71.940971 23.627995 c
71.28566 22.792156 70.55748 21.900995 69.757927 20.9575 c
68.955383 20.012508 68.082458 19.030138 67.137177 18.013874 c
66.190887 16.994619 65.208168 16.051125 64.189514 15.179899 c
62.224575 13.434459 60.45927 12.236275 58.895107 11.58136 c
57.329441 10.927941 55.947445 10.618925 54.74662 10.654811 c
53.545795 10.693189 52.544609 11.036097 51.744061 11.69101 c
50.942513 12.34443 50.32513 13.144382 49.888424 14.089373 c
49.16024 15.542744 49.069405 17.158598 49.615417 18.940424 c
50.161427 20.721252 51.052315 22.773716 52.290073 25.09931 c
52.580048 25.681953 52.944885 26.37076 53.381596 27.171709 c
53.818802 27.970665 54.27198 28.787563 54.74662 29.624397 c
55.219265 30.45874 55.655975 31.260189 56.056747 32.022758 c
56.455524 32.785831 56.837833 33.420807 57.203171 33.930187 c
57.639381 34.730137 57.803085 35.255466 57.694283 35.51165 c
57.58548 35.765343 57.347908 35.856052 56.984566 35.783783 c
56.619728 35.711014 56.16555 35.547535 55.619541 35.293842 c
55.073528 35.037659 54.618355 34.766022 54.255512 34.475449 c
53.090622 33.675495 51.925232 32.821716 50.761841 31.913609 c
49.596951 31.004004 48.504929 30.041569 47.486774 29.025307 c
40.063221 12.454081 l
39.553146 11.434827 38.770565 10.782903 37.715973 10.491331 c
36.661385 10.201754 35.641731 10.219198 34.659012 10.546656 c
33.676792 10.872617 32.912178 11.489154 32.367165 12.399754 c
31.821154 13.306865 31.875555 14.452716 32.530369 15.833319 c
56.111149 66.310066 l
56.401123 67.035751 57.001537 67.490303 57.912388 67.672226 c
W*
0 0 149 87 rc
26.994761 72.795845 m
78.954727 72.795845 l
78.954727 5.2868009 l
26.994761 5.2868009 l
h
f
Q
q
91.045509 52.464458 m
90.680672 51.880817 90.207527 51.300167 89.626083 50.719517 c
89.041641 50.137371 88.568497 49.701759 88.206154 49.411182 c
87.259872 48.829037 86.276649 48.430805 85.258499 48.212502 c
84.238342 47.995193 83.384392 47.956814 82.694145 48.103348 c
82.001892 48.248386 81.528755 48.611729 81.274712 49.193375 c
81.018181 49.774525 81.219315 50.572983 81.874626 51.59174 c
82.091736 52.027851 82.41964 52.590057 82.858345 53.281357 c
83.294556 53.972157 83.693832 54.606636 84.05867 55.190277 c
84.640114 56.061504 85.438171 56.588326 86.458824 56.770245 c
87.478973 56.951172 88.425758 56.896843 89.29818 56.606766 c
90.170601 56.316193 90.825912 55.806816 91.262123 55.080627 c
91.701324 54.353443 91.626961 53.480724 91.045509 52.464458 c
86.570122 28.152884 m
87.005829 28.807301 87.606239 29.150707 88.370361 29.189085 c
89.133972 29.224472 89.84269 29.079433 90.498505 28.751976 c
91.153816 28.424519 91.626961 27.970465 91.917931 27.389814 c
92.208908 26.807669 92.097603 26.190136 91.590027 25.536716 c
90.862846 24.591227 89.898094 23.391548 88.697769 21.938177 c
87.49794 20.483311 85.914307 18.81263 83.949867 16.923647 c
82.710114 15.760351 81.584152 14.778478 80.563499 13.980021 c
79.545845 13.180069 78.526192 12.525154 77.508034 12.018269 c
76.487885 11.508891 75.433792 11.146047 74.341774 10.92824 c
73.249748 10.708939 72.048927 10.600782 70.739296 10.600782 c
67.027527 10.600782 64.862946 12.107983 64.243568 15.124376 c
63.625687 18.14077 64.808044 22.155983 67.791641 27.172009 c
68.446449 28.262535 69.137199 29.478165 69.865883 30.822882 c
70.592567 32.168098 71.339714 33.494873 72.103828 34.802708 c
72.867943 36.111038 73.595123 37.346603 74.286873 38.509403 c
74.978119 39.671204 75.578529 40.653076 76.088608 41.453026 c
76.744423 42.470787 77.579407 43.124207 78.60006 43.415775 c
79.617218 43.704857 80.545036 43.704857 81.383018 43.415775 c
82.218506 43.124207 82.858345 42.63327 83.294556 41.943962 c
83.730766 41.252167 83.656395 40.434273 83.074951 39.490276 c
82.273903 38.109676 81.364548 36.492325 80.346893 34.639229 c
79.326241 32.785629 78.416389 31.131897 77.616341 29.678526 c
76.815292 28.224157 76.03421 26.844551 75.269592 25.536716 c
74.505974 24.228382 73.886597 23.028704 73.413956 21.938177 c
72.939316 20.847649 72.612404 19.921101 72.431236 19.15803 c
72.248566 18.395458 72.339401 17.867142 72.704239 17.578062 c
73.067581 17.212727 73.595123 17.123011 74.286873 17.304932 c
74.978119 17.485855 75.72377 17.831755 76.524818 18.341131 c
77.325867 18.848019 78.12542 19.43166 78.926468 20.085077 c
79.728012 20.739494 80.4552 21.392914 81.111008 22.047827 c
82.347771 23.355661 83.328491 24.391863 84.05867 25.154932 c
84.785355 25.918001 85.623337 26.915825 86.570122 28.152884 c
W*
0 0 149 87 rc
59.084518 61.874577 m
97.076065 61.874577 l
97.076065 5.6007829 l
59.084518 5.6007829 l
h
f
Q
q
93.445862 27.062458 m
95.045464 26.989689 96.737404 27.261822 98.521667 27.880852 c
100.30344 28.497387 101.99538 29.570469 103.59747 31.096111 c
105.34481 32.767288 106.36246 34.329315 106.65593 35.783684 c
106.94441 37.237053 106.36246 37.964237 104.9086 37.964237 c
104.17892 37.964237 103.34344 37.692104 102.39715 37.147339 c
101.45086 36.602077 100.46715 35.839005 99.449486 34.857132 c
98.429337 33.876259 97.411179 32.731903 96.393524 31.423569 c
95.373375 30.115734 94.429581 28.69775 93.554169 27.172108 c
93.445862 27.062458 l
h
108.94828 28.262136 m
107.27232 26.662729 105.63578 25.408226 104.03618 24.500118 c
102.43408 23.591013 100.90635 22.900711 99.449486 22.429213 c
97.993126 21.955223 96.64756 21.683588 95.410309 21.612314 c
94.17305 21.538052 93.117958 21.538052 92.245537 21.612314 c
92.388283 20.448023 92.880386 19.485588 93.718369 18.722517 c
94.55336 17.959946 95.610939 17.468512 96.885132 17.250704 c
98.15683 17.032898 99.613693 17.087225 101.25272 17.414682 c
102.88876 17.74214 104.58069 18.449387 106.32803 19.539915 c
107.20094 20.047796 108.09184 20.665829 109.00118 21.393013 c
109.91054 22.1192 110.80392 22.881771 111.67634 23.68322 c
112.55125 24.481676 113.36827 25.263187 114.13239 26.026257 c
114.89651 26.790323 115.49892 27.49807 115.93512 28.152485 c
116.37133 28.8074 116.97175 29.150806 117.73536 29.188686 c
118.49947 29.224571 119.19222 29.096479 119.8106 28.8074 c
120.42648 28.515829 120.88416 28.06028 121.17513 27.443743 c
121.46561 26.82621 121.39423 26.189737 120.95553 25.536318 c
120.51932 24.881901 119.91891 24.135778 119.15529 23.301435 c
118.39117 22.465099 117.55319 21.573936 116.64384 20.629942 c
115.73449 19.684952 114.75077 18.739962 113.69618 17.795969 c
112.64109 16.850977 111.56803 15.978257 110.47601 15.1798 c
108.29247 13.50613 105.94472 12.325889 103.43377 11.635588 c
100.92481 10.94379 98.521667 10.673152 96.22982 10.818689 c
93.937477 10.963727 91.899666 11.50899 90.114899 12.453981 c
88.330627 13.397975 87.0774 14.70581 86.350716 16.378483 c
85.330063 18.630312 84.983696 20.974844 85.3116 23.410089 c
85.639503 25.843838 86.38765 28.115602 87.550545 30.223888 c
88.93354 32.62225 90.553604 34.748978 92.409744 36.602077 c
94.265381 38.455173 96.19239 39.962872 98.193764 41.125671 c
100.19514 42.287468 102.23344 43.016148 104.30869 43.306225 c
106.38143 43.596802 108.29247 43.415874 110.0398 42.760963 c
111.6394 42.107544 112.66006 41.125671 113.09576 39.817837 c
113.53197 38.509502 113.58788 37.128899 113.25997 35.675526 c
112.93206 34.220661 112.34762 32.821617 111.51263 31.477896 c
110.67465 30.132679 109.8207 29.061092 108.94828 28.262136 c
108.94828 28.262136 l
h
W*
0 0 149 87 rc
80.192001 48.44046 m
126.34966 48.44046 l
126.34966 5.7805448 l
80.192001 5.7805448 l
h
f
Q
q
136.56865 51.26458 m
136.42041 51.046776 136.093 50.429241 135.58542 49.411484 c
135.07484 48.393723 134.50937 47.303196 133.89349 46.141895 c
133.27461 44.977604 132.69316 43.887077 132.14566 42.870811 c
131.60114 41.851559 131.2892 41.23502 131.21783 41.017715 c
132.45509 42.179016 133.78519 43.61544 135.20212 45.323502 c
136.62155 47.030067 138.05945 49.120907 139.5163 51.592037 c
140.53397 53.336979 141.13437 54.662258 141.31654 55.571861 c
141.49622 56.479969 141.40637 56.934025 141.04454 56.934025 c
140.6797 56.934025 140.09775 56.479969 139.29671 55.571861 c
138.49615 54.662258 137.5863 53.227329 136.56865 51.26458 c
145.95613 50.283703 m
144.64502 47.956615 143.18816 45.795998 141.58905 43.797359 c
139.98695 41.797729 138.31348 39.962574 136.56865 38.291893 c
134.8213 36.619221 133.05551 35.112022 131.27324 33.766808 c
129.48897 32.421589 127.83397 31.277235 126.30624 30.333241 c
126.158 28.588297 126.25083 27.079603 126.57824 25.808151 c
126.90615 24.535704 127.39776 23.609156 128.05357 23.028503 c
128.48978 22.592892 129.17953 22.500685 130.12631 22.756371 c
131.0726 23.010063 132.07179 23.427235 133.12938 24.010876 c
134.18396 24.591526 135.18365 25.263386 136.12994 26.026457 c
137.07622 26.790524 137.76897 27.49777 138.20518 28.152685 c
138.64139 28.8076 139.2413 29.150507 140.00542 29.188885 c
140.76953 29.224771 141.48024 29.079235 142.13606 28.752275 c
142.78888 28.424818 143.26202 27.970266 143.55548 27.389616 c
143.84396 26.807468 143.73566 26.189936 143.22807 25.536516 c
142.57227 24.663795 141.60751 23.609156 140.33333 22.375086 c
139.05913 21.138523 137.66066 19.976723 136.12994 18.886196 c
134.6017 17.796167 133.02107 16.886564 131.38203 16.160378 c
129.7455 15.433193 128.23325 15.141622 126.85075 15.288155 c
125.32252 15.433193 124.08575 15.996898 123.13897 16.977774 c
122.19269 17.959646 121.64817 19.5755 121.50294 21.829823 c
120.26268 19.431459 119.06236 17.10437 117.89947 14.852542 c
116.73357 12.599218 115.69995 10.600583 114.7876 8.8556404 c
113.87875 7.1116948 113.1331 5.6398821 112.55116 4.4402027 c
111.9697 3.2415199 111.56793 2.4968915 111.34834 2.2053199 c
110.76688 1.1890565 109.9289 0.57002795 108.83987 0.35222158 c
107.74786 0.13441524 106.7272 0.22662158 105.78091 0.62535173 c
104.83713 1.0255772 104.12641 1.6984342 103.65277 2.6424279 c
103.17963 3.5874183 103.30939 4.7133327 104.03608 6.021666 c
104.54366 6.9666567 105.47198 8.6762123 106.82004 11.145847 c
108.1656 13.615482 109.7123 16.487835 111.45963 19.757421 c
113.20447 23.028503 115.07858 26.517393 117.07995 30.223589 c
119.08132 33.930286 120.97389 37.436119 122.75816 40.744083 c
124.54044 44.050556 126.12357 46.994678 127.50656 49.574963 c
128.88905 52.154247 129.86978 53.990398 130.45372 55.080925 c
131.61711 57.332756 133.03654 59.150467 134.713 60.532566 c
136.38647 61.911671 138.04097 62.892548 139.68051 63.475693 c
141.31654 64.056839 142.84477 64.200882 144.26421 63.911804 c
145.68362 63.619732 146.77565 62.930927 147.53976 61.840401 c
148.30388 60.75037 148.61282 59.240181 148.46759 57.315311 c
148.31985 55.389442 147.48438 53.04541 145.95613 50.283703 c
W*
0 0 149 87 rc
98.373932 69.056358 m
153.50241 69.056358 l
153.50241 -4.7626987 l
98.373932 -4.7626987 l
h
f
ep
end
%%Trailer
%%EOF
